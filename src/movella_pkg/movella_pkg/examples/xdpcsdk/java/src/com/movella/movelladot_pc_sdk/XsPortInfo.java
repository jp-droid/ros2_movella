
//  Copyright (c) 2003-2023 Movella Technologies B.V. or subsidiaries worldwide.
//  All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification,
//  are permitted provided that the following conditions are met:
//  
//  1.	Redistributions of source code must retain the above copyright notice,
//  	this list of conditions and the following disclaimer.
//  
//  2.	Redistributions in binary form must reproduce the above copyright notice,
//  	this list of conditions and the following disclaimer in the documentation
//  	and/or other materials provided with the distribution.
//  
//  3.	Neither the names of the copyright holders nor the names of their contributors
//  	may be used to endorse or promote products derived from this software without
//  	specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
//  THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY OR
//  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.movella.movelladot_pc_sdk;

public class XsPortInfo {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected XsPortInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(XsPortInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        movelladot_pc_sdkJNI.delete_XsPortInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public XsPortInfo() {
    this(movelladot_pc_sdkJNI.new_XsPortInfo__SWIG_0(), true);
  }

  public XsPortInfo(XsString portname, XsBaudRate baudRate, XsPortLinesOptions linesOptions) {
    this(movelladot_pc_sdkJNI.new_XsPortInfo__SWIG_1(XsString.getCPtr(portname), portname, baudRate.swigValue(), linesOptions.swigValue()), true);
  }

  public XsPortInfo(XsString portname, XsBaudRate baudRate) {
    this(movelladot_pc_sdkJNI.new_XsPortInfo__SWIG_2(XsString.getCPtr(portname), portname, baudRate.swigValue()), true);
  }

  public XsPortInfo(XsString portname) {
    this(movelladot_pc_sdkJNI.new_XsPortInfo__SWIG_3(XsString.getCPtr(portname), portname), true);
  }

  public void clear() {
    movelladot_pc_sdkJNI.XsPortInfo_clear(swigCPtr, this);
  }

  public boolean empty() {
    return movelladot_pc_sdkJNI.XsPortInfo_empty(swigCPtr, this);
  }

  public int portNumber() {
    return movelladot_pc_sdkJNI.XsPortInfo_portNumber(swigCPtr, this);
  }

  public XsString portName() {
    return new XsString(movelladot_pc_sdkJNI.XsPortInfo_portName(swigCPtr, this), true);
  }

  public String portName_c_str() {
    return movelladot_pc_sdkJNI.XsPortInfo_portName_c_str(swigCPtr, this);
  }

  public void setPortName(XsString portName_) {
    movelladot_pc_sdkJNI.XsPortInfo_setPortName(swigCPtr, this, XsString.getCPtr(portName_), portName_);
  }

  public boolean isUsb() {
    return movelladot_pc_sdkJNI.XsPortInfo_isUsb(swigCPtr, this);
  }

  public boolean isBluetooth() {
    return movelladot_pc_sdkJNI.XsPortInfo_isBluetooth(swigCPtr, this);
  }

  public boolean isNetwork() {
    return movelladot_pc_sdkJNI.XsPortInfo_isNetwork(swigCPtr, this);
  }

  public XsString networkServiceName() {
    return new XsString(movelladot_pc_sdkJNI.XsPortInfo_networkServiceName(swigCPtr, this), true);
  }

  public XsString bluetoothAddress() {
    return new XsString(movelladot_pc_sdkJNI.XsPortInfo_bluetoothAddress(swigCPtr, this), true);
  }

  public int usbBus() {
    return movelladot_pc_sdkJNI.XsPortInfo_usbBus(swigCPtr, this);
  }

  public int usbAddress() {
    return movelladot_pc_sdkJNI.XsPortInfo_usbAddress(swigCPtr, this);
  }

  public XsBaudRate baudrate() {
    return XsBaudRate.swigToEnum(movelladot_pc_sdkJNI.XsPortInfo_baudrate(swigCPtr, this));
  }

  public void setBaudrate(XsBaudRate baudrate_) {
    movelladot_pc_sdkJNI.XsPortInfo_setBaudrate(swigCPtr, this, baudrate_.swigValue());
  }

  public XsDeviceId deviceId() {
    return new XsDeviceId(movelladot_pc_sdkJNI.XsPortInfo_deviceId(swigCPtr, this), true);
  }

  public void setDeviceId(XsDeviceId deviceId_) {
    movelladot_pc_sdkJNI.XsPortInfo_setDeviceId(swigCPtr, this, XsDeviceId.getCPtr(deviceId_), deviceId_);
  }

  public XsPortLinesOptions linesOptions() {
    return XsPortLinesOptions.swigToEnum(movelladot_pc_sdkJNI.XsPortInfo_linesOptions(swigCPtr, this));
  }

  public void setLinesOptions(XsPortLinesOptions linesOptions) {
    movelladot_pc_sdkJNI.XsPortInfo_setLinesOptions(swigCPtr, this, linesOptions.swigValue());
  }

  public void getVidPid(SWIGTYPE_p_unsigned_short vid, SWIGTYPE_p_unsigned_short pid) {
    movelladot_pc_sdkJNI.XsPortInfo_getVidPid(swigCPtr, this, SWIGTYPE_p_unsigned_short.getCPtr(vid), SWIGTYPE_p_unsigned_short.getCPtr(pid));
  }

  public void setVidPid(int vid, int pid) {
    movelladot_pc_sdkJNI.XsPortInfo_setVidPid(swigCPtr, this, vid, pid);
  }

}
