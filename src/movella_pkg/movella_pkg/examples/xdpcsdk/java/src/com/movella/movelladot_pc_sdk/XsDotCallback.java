
//  Copyright (c) 2003-2023 Movella Technologies B.V. or subsidiaries worldwide.
//  All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification,
//  are permitted provided that the following conditions are met:
//  
//  1.	Redistributions of source code must retain the above copyright notice,
//  	this list of conditions and the following disclaimer.
//  
//  2.	Redistributions in binary form must reproduce the above copyright notice,
//  	this list of conditions and the following disclaimer in the documentation
//  	and/or other materials provided with the distribution.
//  
//  3.	Neither the names of the copyright holders nor the names of their contributors
//  	may be used to endorse or promote products derived from this software without
//  	specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
//  THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY OR
//  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.movella.movelladot_pc_sdk;

public class XsDotCallback {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected XsDotCallback(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(XsDotCallback obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        movelladot_pc_sdkJNI.delete_XsDotCallback(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    movelladot_pc_sdkJNI.XsDotCallback_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    movelladot_pc_sdkJNI.XsDotCallback_change_ownership(this, swigCPtr, true);
  }

  public XsDotCallback() {
    this(movelladot_pc_sdkJNI.new_XsDotCallback(), true);
    movelladot_pc_sdkJNI.XsDotCallback_director_connect(this, swigCPtr, true, true);
  }

  protected void onAdvertisementFound(XsPortInfo portInfo) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onAdvertisementFound(swigCPtr, this, XsPortInfo.getCPtr(portInfo), portInfo); else movelladot_pc_sdkJNI.XsDotCallback_onAdvertisementFoundSwigExplicitXsDotCallback(swigCPtr, this, XsPortInfo.getCPtr(portInfo), portInfo);
  }

  protected void onBatteryUpdated(XsDotDevice device, int batteryLevel, int chargingStatus) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onBatteryUpdated(swigCPtr, this, XsDotDevice.getCPtr(device), device, batteryLevel, chargingStatus); else movelladot_pc_sdkJNI.XsDotCallback_onBatteryUpdatedSwigExplicitXsDotCallback(swigCPtr, this, XsDotDevice.getCPtr(device), device, batteryLevel, chargingStatus);
  }

  protected void onLiveDataAvailable(XsDotDevice device, XsDataPacket packet) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onLiveDataAvailable(swigCPtr, this, XsDotDevice.getCPtr(device), device, XsDataPacket.getCPtr(packet), packet); else movelladot_pc_sdkJNI.XsDotCallback_onLiveDataAvailableSwigExplicitXsDotCallback(swigCPtr, this, XsDotDevice.getCPtr(device), device, XsDataPacket.getCPtr(packet), packet);
  }

  protected void onProgressUpdated(XsDotDevice device, int current, int total, XsString identifier) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onProgressUpdated__SWIG_0(swigCPtr, this, XsDotDevice.getCPtr(device), device, current, total, XsString.getCPtr(identifier), identifier); else movelladot_pc_sdkJNI.XsDotCallback_onProgressUpdatedSwigExplicitXsDotCallback__SWIG_0(swigCPtr, this, XsDotDevice.getCPtr(device), device, current, total, XsString.getCPtr(identifier), identifier);
  }

  protected void onDeviceUpdateDone(XsPortInfo portInfo, XsDotFirmwareUpdateResult result) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onDeviceUpdateDone(swigCPtr, this, XsPortInfo.getCPtr(portInfo), portInfo, result.swigValue()); else movelladot_pc_sdkJNI.XsDotCallback_onDeviceUpdateDoneSwigExplicitXsDotCallback(swigCPtr, this, XsPortInfo.getCPtr(portInfo), portInfo, result.swigValue());
  }

  protected void onError(XsResultValue result, XsString error) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onError(swigCPtr, this, result.swigValue(), XsString.getCPtr(error), error); else movelladot_pc_sdkJNI.XsDotCallback_onErrorSwigExplicitXsDotCallback(swigCPtr, this, result.swigValue(), XsString.getCPtr(error), error);
  }

  protected void onRecordingStopped(XsDotDevice device) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onRecordingStopped(swigCPtr, this, XsDotDevice.getCPtr(device), device); else movelladot_pc_sdkJNI.XsDotCallback_onRecordingStoppedSwigExplicitXsDotCallback(swigCPtr, this, XsDotDevice.getCPtr(device), device);
  }

  protected void onDeviceStateChanged(XsDotDevice dev, XsDeviceState newState, XsDeviceState oldState) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onDeviceStateChanged(swigCPtr, this, XsDotDevice.getCPtr(dev), dev, newState.swigValue(), oldState.swigValue()); else movelladot_pc_sdkJNI.XsDotCallback_onDeviceStateChangedSwigExplicitXsDotCallback(swigCPtr, this, XsDotDevice.getCPtr(dev), dev, newState.swigValue(), oldState.swigValue());
  }

  protected void onButtonClicked(XsDotDevice dev, long timestamp) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onButtonClicked(swigCPtr, this, XsDotDevice.getCPtr(dev), dev, timestamp); else movelladot_pc_sdkJNI.XsDotCallback_onButtonClickedSwigExplicitXsDotCallback(swigCPtr, this, XsDotDevice.getCPtr(dev), dev, timestamp);
  }

  protected void onRecordedDataAvailable(XsDotDevice device, XsDataPacket packet) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onRecordedDataAvailable__SWIG_0(swigCPtr, this, XsDotDevice.getCPtr(device), device, XsDataPacket.getCPtr(packet), packet); else movelladot_pc_sdkJNI.XsDotCallback_onRecordedDataAvailableSwigExplicitXsDotCallback__SWIG_0(swigCPtr, this, XsDotDevice.getCPtr(device), device, XsDataPacket.getCPtr(packet), packet);
  }

  protected void onRecordedDataDone(XsDotDevice device) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onRecordedDataDone__SWIG_0(swigCPtr, this, XsDotDevice.getCPtr(device), device); else movelladot_pc_sdkJNI.XsDotCallback_onRecordedDataDoneSwigExplicitXsDotCallback__SWIG_0(swigCPtr, this, XsDotDevice.getCPtr(device), device);
  }

  protected void onProgressUpdated(XsDotUsbDevice device, int current, int total, XsString identifier) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onProgressUpdated__SWIG_1(swigCPtr, this, XsDotUsbDevice.getCPtr(device), device, current, total, XsString.getCPtr(identifier), identifier); else movelladot_pc_sdkJNI.XsDotCallback_onProgressUpdatedSwigExplicitXsDotCallback__SWIG_1(swigCPtr, this, XsDotUsbDevice.getCPtr(device), device, current, total, XsString.getCPtr(identifier), identifier);
  }

  protected void onRecordedDataAvailable(XsDotUsbDevice device, XsDataPacket packet) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onRecordedDataAvailable__SWIG_1(swigCPtr, this, XsDotUsbDevice.getCPtr(device), device, XsDataPacket.getCPtr(packet), packet); else movelladot_pc_sdkJNI.XsDotCallback_onRecordedDataAvailableSwigExplicitXsDotCallback__SWIG_1(swigCPtr, this, XsDotUsbDevice.getCPtr(device), device, XsDataPacket.getCPtr(packet), packet);
  }

  protected void onRecordedDataDone(XsDotUsbDevice device) {
    if (getClass() == XsDotCallback.class) movelladot_pc_sdkJNI.XsDotCallback_onRecordedDataDone__SWIG_1(swigCPtr, this, XsDotUsbDevice.getCPtr(device), device); else movelladot_pc_sdkJNI.XsDotCallback_onRecordedDataDoneSwigExplicitXsDotCallback__SWIG_1(swigCPtr, this, XsDotUsbDevice.getCPtr(device), device);
  }

}
